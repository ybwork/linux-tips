Оглавление.

  Установка gem.

  Базовые команды.

  Где правильно делать order_by. (?)

  Чистый проект.

  Роутинг.

  Котроллеры.

  Модели.

Установка gem.

  gem install suspenders

  gamefile -> gem "suspenders" -> bundle install

Базовые команды.
  
  bin/rails server

  bin/rails generate controller Welcome index

  bin/rails routes

  bin/rails generate model Event title:string text:text organizers:references

  bin/rails db:migrate

  bin/rails db:migrate RAILS_ENV=production

Где правильно делать order_by.

Чистый проект.
  
  Можно использовать gem suspenders. Перед запуском поменять версию в .ruby-version, Gemfile на нужную версию.

Роутинг.

  Объявляются в config/routes.rb

  get 'admin', action: :index, controller: 'admin', as: 'admin' - одиночный роут

  resources :articles - роут ресурса

Котроллеры.

  Частой практикой является помещать стандартные экшны CRUD в каждом контроллере в следующем порядке: index, show, new, edit, create, update и destroy.

  Отметьте, что в экшене create мы использовали render вместо redirect_to, когда save возвращает false. Метод render использован, чтобы объект @article был передан назад в шаблон new, когда он будет отрендерен. Этот рендеринг выполняется в рамках того же запроса, что и отправка формы, в то время как redirect_to сообщает браузеру выполнить другой запрос. Мы сделали так, потому что в противном случае @article будет nil во вьюхе, и вызов @article.errors.any? вызовет ошибку.

    if @article.save
      redirect_to @article
    else
      render 'new'
    end

Модели.

  belongs_to :organizer - обратная связь один ко многим

  has_many :event - связь один ко многим

  validates_associated :organizer - валидация по связанному полю

  validates :name, presence: true, length: {maximum: 30} - обычная валидация


<%= form_with scope: :article, url: articles_path, local: true do |form| %>
  <p>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
  </p>

  <p>
    <%= form.label :text %><br>
    <%= form.text_area :text %>
  </p>

  <p>
    <%= form.submit %>
  </p>
<% end %>

<%= link_to 'New article', new_article_path %>

@article.errors.any?

@article.errors.full_messages

Наша страница edit очень похожа на страницу new, фактически они используют один и тот же код для отображения формы. Давайте уберем это дублирование, использовав партиал вьюхи. По соглашению, файлы партиалов начинаются со знака подчеркивания.

@article.comments

resources :articles do
  resources :comments
end

@article.comments.each do |comment|

link_to 'Delete comment', [comment.article, comment]

для работы с картинками carrierwave
  





